// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id        Int      @id @default(autoincrement())
  name      String
  scholarId Int      @unique
  email     String   @unique
  password  String
  dob       DateTime
  img       String
  branch    Branch
  role      Role
  verified  Boolean  @default(false)
  otpValue  String
  otpExpiry DateTime

  articles Article[]
  comments Comment[]

  blocked   Block[] @relation("Blocker")
  blockedBy Block[] @relation("Blockee")

  mentor MentorMentee[] @relation("Mentor")
  mentee MentorMentee[] @relation("Mentee")
}

model Article {
  id         Int        @id @default(autoincrement())
  title      String
  body       String
  tags       String[]
  type       Type
  visibility Visibility @default(PUBLIC)
  score      Int        @default(0)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  comments Comment[]

  votes ArticleVote[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  score     Int      @default(0)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  parentId Int
  parent   Article @relation(fields: [parentId], references: [id])

  votes CommentVote[]
}

model ArticleVote {
  id Int @id @default(autoincrement())

  vote      Vote
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
}

model CommentVote {
  id Int @id @default(autoincrement())

  vote      Vote
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])
}

model Block {

  id Int @id @default(autoincrement())

  blockerId Int
  blocker   User @relation(fields: [blockerId], references: [id], name: "Blocker")

  blockeeId Int
  blockee   User @relation(fields: [blockeeId], references: [id], name: "Blockee")

}

model MentorMentee {

  id Int @id @default(autoincrement())

  mentorId Int
  mentor   User @relation(fields: [mentorId], references: [id], name: "Mentor")

  menteeId Int
  mentee   User @relation(fields: [menteeId], references: [id], name: "Mentee")

  isVerified Boolean @default(false)
}

enum Branch {

  CSE
  ECE
  EIE
  EE
  ME
  CE

}

enum Role {

  OWNER
  MODERATOR
  MENTOR
  MENTEE

}

enum Visibility {

  PUBLIC
  PRIVATE // Mentors only

}

enum Type {

  QNA
  ARTICLE

}

enum Vote {

  UPVOTE
  DOWNVOTE

}
